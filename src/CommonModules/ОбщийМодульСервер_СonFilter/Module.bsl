#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Формирует и преобразовывает переданный вариант отчета в дерево значений и формирует JSON описание
//
// Параметры:
//  ВариантОтчета 		- СправочникСсылка.ВариантыОтчетов - Ссылка на вариант отчета
//	ФормироватьСтрокой 	- Булево - Представить результат в виде строки (для больших отчетов замедляет генерацию)
//	ОтладочныйРежим 	- Булево - Включить проверку корректность формата и структуризации результата (не рекомендуется для продуктивной системы)
//	Ссылки 				- Булево - Если истина то формируются web ссылки с представлением, если ложь то только уникальные идентифкаторы
//
// Возвращаемое значение:
//   Структура, Строка  - Структура (если ошибки, см. область КодыОшибок),
//						  Строка (при формировании в строку - результат, иначе - путь к файлу). Удаление файла на стороне инициатора!							
//
Функция ПреобразоватьВариантОтчета(ВариантОтчета, ФормироватьСтрокой = Ложь, ОтладочныйРежим = Ложь, Ссылки = Ложь) Экспорт 
	
	Отказ = Ложь;
	
	Если Не ТипЗнч(ВариантОтчета) = Тип("СправочникСсылка.ВариантыОтчетов") Тогда		
		
		Отказ = Истина;
		Возврат ОшибкаПереданНеОтчет();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ВариантОтчета) Тогда
		
		Отказ = Истина;
		Возврат ОшибкаОтчетНайден();
		
	КонецЕсли; 
	
	ПараметрыОтчета  = Новый Структура;
	ПараметрыОтчета.Вставить("СсылкаВарианта", ВариантОтчета);
	Попытка 
		ПараметрыОтчета.Вставить("СсылкаОтчета", ВариантОтчета.Отчет);
		ПараметрыОтчета.Вставить("НастройкиКД", ВариантОтчета.Настройки.Получить());
	Исключение
		Отказ = Истина;
		Возврат ОшибкаОтчетНайден();
	КонецПопытки;
		
	НастройкиОтчета = ВариантыОтчетов.ПодключитьОтчетИЗагрузитьНастройки(ПараметрыОтчета);
	
	Если НастройкиОтчета.Успех Тогда	
		
		ДатаФормирования = ТекущаяДата();
		ДатаФормированияВМиллисекундах = ТекущаяУниверсальнаяДатаВМиллисекундах();
		РезультатОтчета = СформироватьОтчет(НастройкиОтчета, Отказ);
		Если ТипЗнч(РезультатОтчета) <> Тип("ДеревоЗначений") Тогда
			Возврат РезультатОтчета; // Содержит НовыеДанныеОшибки
		КонецЕсли; 
		
#Область ОписаниеКолонок
		ОбъявлениеКолонок = Новый Соответствие;
		СтруктураКолонок = Новый Структура;
		Для каждого Колонка Из РезультатОтчета.Колонки Цикл
			
			СтруктураКолонки = Новый Структура;
			СтруктураКолонки.Вставить("Presentation", Колонка.Заголовок);
			// СтруктураКолонки.Вставить("Type", ""); Тип описывается только для ссылочных типов, либо указание, что тип может быть составным
				
			ТипыКолонки = Колонка.ТипЗначения.Типы();
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ТипыКолонки, ТипЗнч(Null));			
			Если ТипыКолонки.Количество() = 1 Тогда
				
				// Если колонка содержит только один тип - не дублируем в данных тип, объявляем его сразу
				Если ОбщегоНазначения.ЭтоСсылка(ТипыКолонки[0]) Тогда
							   
					ПолноеИмя = Метаданные.НайтиПоТипу(ТипыКолонки[0]).ПолноеИмя();				
					СтруктураКолонки.Вставить("Type", ПолноеИмя)
					
				КонецЕсли;
				
			Иначе
				
				СтруктураКолонки.Вставить("Type", "Сomposite")
				
			КонецЕсли; 
			
			ОбъявлениеКолонок[Колонка.Имя] = СтруктураКолонки;
			СтруктураКолонок.Вставить(Колонка.Имя);
			
		КонецЦикла; 
#КонецОбласти
		
		ЗаписьJSON = Новый ЗаписьJSON;
		
		Если ОтладочныйРежим Тогда
			ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
			
		Иначе
			
			ЗаписьJSON.ПроверятьСтруктуру = Ложь;
			ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
			
		КонецЕсли; 
		
		Если ФормироватьСтрокой Тогда
			ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);			
		Иначе		
			ИмяФайлаОтчета = СтрШаблон("Report%1", Формат(ДатаФормированияВМиллисекундах, "ЧГ="));
			ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременныхФайлов(), ИмяФайлаОтчета + ".json");
			ЗаписьJSON.ОткрытьФайл(ПолноеИмяФайла,,, ПараметрыЗаписиJSON);		
		КонецЕсли; 
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписатьОписаниеОтчета(ЗаписьJSON, ДатаФормирования, ВариантОтчета);
		ЗаписатьОбъявлениеКолонок(ЗаписьJSON, ОбъявлениеКолонок);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("ReportData");
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбъявлениеКолонок", ОбъявлениеКолонок);
		ДополнительныеПараметры.Вставить("КешТипов", 	Новый Соответствие);
		ДополнительныеПараметры.Вставить("Ссылки", 		Ссылки);
		ЗаписатьДанныеСтрок(ЗаписьJSON, РезультатОтчета.Строки, СтруктураКолонок, ДополнительныеПараметры);
				
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		СтрокаJSON = ЗаписьJSON.Закрыть();
		Если ФормироватьСтрокой Тогда
			Если Ссылки Тогда
				//Убрем дату из времени
				СтрокаJSON = СтрЗаменить(СтрокаJSON,"T00:00:00","");
				//Уберем дату из времени
				СтрокаJSON = СтрЗаменить(СтрокаJSON,"0001-01-01T","");
			КонецЕсли;						
			Возврат СтрокаJSON		
		Иначе			
			ПолноеИмяФайлаZIP = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременныхФайлов(), ИмяФайлаОтчета + ".zip");
			ФайлZIP = Новый ЗаписьZipФайла(ПолноеИмяФайлаZIP,,, МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
			ФайлZIP.Добавить(ПолноеИмяФайла);
			ФайлZIP.Записать();
			УдалитьВременныйФайл(ПолноеИмяФайла);
			Возврат ПолноеИмяФайлаZIP;			
		КонецЕсли; 	
		
	Иначе
#Область ОтказВИнициализации
		ЗаписьЖурналаРегистрации(
			ИмяСобытияТрансформацииОтчетов(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			ВариантОтчета,
			НастройкиОтчета.ТекстОшибки);
			
		Отказ = Истина;
		Возврат ОшибкаОтказИнициализацииОтчета(НастройкиОтчета.ТекстОшибки);
#КонецОбласти	
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КодыОшибок

// Новые данные ошибки.
// 
// Возвращаемое значение:
//  Структура - Новые данные ошибки:
// * Код      - Неопределено
// * Описание - Неопределено
Функция НовыеДанныеОшибки()
	
	Возврат Новый Структура("Код, Описание");
	
КонецФункции

// Код 0
// 
// Параметры:
//  Описание - Неопределено, Строка - Описание
// 
// Возвращаемое значение:
//  Структура - см. НовыеДанныеОшибки
Функция ОшибкаНеизвестнаяОшибка(Описание = Неопределено)
	
	ДанныеОшибки = НовыеДанныеОшибки();
	ДанныеОшибки.Код = 0;
	Если Описание = Неопределено Тогда
		ДанныеОшибки.Описание = НСтр("ru = 'Неизвестная ошибка'");
	ИначеЕсли ТипЗнч(Описание) <> Тип("Строка") Тогда
		ДанныеОшибки.Описание = НСтр("ru = 'Внутренная ошибка: переданное описание ошибки не является строкой'");
	Иначе
		ДанныеОшибки.Описание = Описание;
	КонецЕсли; 
	
	Возврат ДанныеОшибки;
	
КонецФункции

// Код 1
// 
// Возвращаемое значение:
//  Структура - см. НовыеДанныеОшибки
Функция ОшибкаПереданНеОтчет()
	
	ДанныеОшибки = НовыеДанныеОшибки();
	ДанныеОшибки.Код = 1;
	ДанныеОшибки.Описание = НСтр("ru = 'Передан параметр, не являющийся ссылкой на вариант отчета'");
	
	Возврат ДанныеОшибки;
	
КонецФункции

// Код 2
Функция ОшибкаОтказИнициализацииОтчета(Описание)
	
	ДанныеОшибки = НовыеДанныеОшибки();
	ДанныеОшибки.Код = 2;
	ДанныеОшибки.Описание = Описание;
	
	Возврат ДанныеОшибки;
	
КонецФункции

// Код 4
Функция ОшибкаОтказФормированияОтчета(Описание)
	
	ДанныеОшибки = НовыеДанныеОшибки();
	ДанныеОшибки.Код = 4;
	ДанныеОшибки.Описание = Описание;
	
	Возврат ДанныеОшибки;
	
КонецФункции

// Код 5
// 
// Возвращаемое значение:
//  
Функция ОшибкаОтчетНайден()
	
	ДанныеОшибки = НовыеДанныеОшибки();
	ДанныеОшибки.Код = 5;
	ДанныеОшибки.Описание = НСтр("ru = 'Отчет не найден'");
	
	Возврат ДанныеОшибки;
	
КонецФункции

// Код 6
// 
// 
// Возвращаемое значение:
//  Структура - см. НовыеДанныеОшибки
Функция ОшибкаОтчетНеОпубликован() Экспорт 
	
	ДанныеОшибки = НовыеДанныеОшибки();
	ДанныеОшибки.Код = 6;
	ДанныеОшибки.Описание = НСтр("ru = 'Отчет не опубликован в доступной подсистеме'");
	
	Возврат ДанныеОшибки;
	
КонецФункции


#КонецОбласти

Функция СформироватьОтчет(ПараметрыОтчета, Отказ) 
	
	РезультатОтчета = Новый ДеревоЗначений;
	
	//КомпоновщикНастроекКД = ПараметрыОтчета.Объект.КомпоновщикНастроек;
	СхемаКД = ПараметрыОтчета.Объект.СхемаКомпоновкиДанных;
	
	КомпоновщикМакетаКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Попытка	
		
		МакетКД = КомпоновщикМакетаКД.Выполнить(
			СхемаКД,
			ПараметрыОтчета.НастройкиКД, //КомпоновщикНастроекКД.ПолучитьНастройки(),
			,
			,
			Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"),
			Ложь);	
		
	Исключение
		
		Отказ = Истина;		
		//@skip-check object-deprecated
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияТрансформацииОтчетов(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			ПараметрыОтчета.СсылкаВарианта,
			ПредставлениеОшибки);
		
		Возврат ОшибкаОтказФормированияОтчета(ПредставлениеОшибки);
				
	КонецПопытки; 
	
	Если НЕ Отказ Тогда

		ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКД.Инициализировать(МакетКД,,, Истина);
		
		ПроцессорВыводаРезультатаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВыводаРезультатаКД.УстановитьОбъект(РезультатОтчета);
		ПроцессорВыводаРезультатаКД.Вывести(ПроцессорКД);
		
	КонецЕсли; 
	
	Возврат РезультатОтчета;

КонецФункции

Функция ИмяСобытияТрансформацииОтчетов()
	
	Возврат "Трансформация отчетов в формат JSON";
	
КонецФункции

#Область ГенерацияJSON

Процедура ЗаписатьОписаниеОтчета(ЗаписьJSON, ЗНАЧ ДатаФормирования, ЗНАЧ ВариантОтчета)
	
	ЗаписьJSON.ЗаписатьИмяСвойства("Version");
	ЗаписьJSON.ЗаписатьЗначение(ОбщийМодульСерверПовтИсп_СonFilter.Версия());
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ReportInfo");
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("Configuration");
	ЗаписьJSON.ЗаписатьЗначение(Метаданные.Версия);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("GenerateDate");
	ЗаписатьJSON(ЗаписьJSON, ДатаФормирования);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ReportRef");	
	ЗаписьJSON.ЗаписатьЗначение(ПолучитьИнтернетСсылку(ВариантОтчета));
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();

КонецПроцедуры

Функция ПолучитьИнтернетСсылку(Ссылка)
	Возврат ОбщийМодульСерверПовтИсп_СonFilter.АдресПубликацииИнформационнойБазыВИнтернете()+ПолучитьНавигационнуюСсылку(Ссылка);
КонецФункции

Процедура ЗаписатьОбъявлениеКолонок(ЗаписьJSON, ОбъявлениеКолонок)
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ColumnDeclare");
	ЗаписатьJSON(ЗаписьJSON, ОбъявлениеКолонок);

КонецПроцедуры

Процедура ЗаписатьДанныеСтрок(ЗаписьJSON, Строки, СтруктураКолонок, ДополнительныеПараметры)
	
	Если Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	НомерСтроки = 0;
	Для каждого СтрокаДерева Из Строки Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураКолонок, СтрокаДерева);
		ЗаписатьJSON(ЗаписьJSON, СтруктураКолонок,, "ПреобразованиеЗначений", ОбщийМодульСервер_СonFilter, ДополнительныеПараметры);
		ЗаписатьДанныеСтрок(ЗаписьJSON, СтрокаДерева.Строки, СтруктураКолонок, ДополнительныеПараметры);
		
		НомерСтроки = НомерСтроки + 1;
				
	КонецЦикла;
	
	ЗаписьJSON.ЗаписатьКонецМассива();
		
КонецПроцедуры

// Преобразует переданное значение в JSON-строку.
//
// Параметры:
//  Данные - Структура - данные.
// 
// Возвращаемое значение:
//  Строка - строка в формате JSON.
//
Функция СтрокаJSON(Данные) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные,, "ПреобразованиеДанныхJSON", ОбщийМодульСервер_СonFilter);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// Cм. метод глобального контекста - ЗаписатьJSON, параметр ИмяФункцииПреобразования.
//
Функция ПреобразованиеДанныхJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Null") Тогда
		Отказ = Истина;
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение)) Тогда
		Возврат Строка(Значение.УникальныйИдентификатор());
	ИначеЕсли ТипЗнч(Значение) = Тип("УникальныйИдентификатор") Тогда
		Возврат Строка(Значение);
	КонецЕсли; 
	
КонецФункции

// Возвращает значение для идентификации общего типа "Перечисления".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаПеречисления()
	
	Возврат "Перечисления";
	
КонецФункции

// Преобразование значений.
// 
// Параметры:
//  Свойство 				- Строка
//  Значение 				- Произвольный
//  ДополнительныеПараметры - Структура
//  	* ОбъявлениеКолонок - Соответствие
//		* КешТипов 			- Соответствие
//		* Ссылки			- Булево
//  Отказ 					- Булево - Отказ
// 
// Возвращаемое значение:
//  Неопределено, Соответствие Из Строка, Строка - Преобразование значений
Функция ПреобразованиеЗначений(ЗНАЧ Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	// Если объявлен тип колонки - то не пишем его повторно.
	// Повторно пишется только для составных типов в колонке
	
	ОбъявлениеКолонок = ДополнительныеПараметры.ОбъявлениеКолонок;
	КешТипов = ДополнительныеПараметры.КешТипов;
	
	ТипЗначения = ТипЗнч(Значение);
	
	ИмяКорневогоТипа = КешТипов[ТипЗначения];
	Если ИмяКорневогоТипа = Неопределено Тогда

		Если ТипЗначения = Тип("Null") Тогда
			ИмяКорневогоТипа = "Null";
		Иначе
			ИмяКорневогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(Значение.Метаданные());
		КонецЕсли;
		КешТипов[ТипЗначения] = ИмяКорневогоТипа;
		
	КонецЕсли; 
	
	Если ВРег(ИмяКорневогоТипа) = ВРег("Null") Тогда
		
		Результат = ПолучитьНеопределено(ДополнительныеПараметры);
		
	ИначеЕсли ВРег(ИмяКорневогоТипа) = ВРег(ИмяТипаПеречисления()) Тогда
		
		// Может быть пустое значение, определяем это заранее
		Если ЗначениеЗаполнено(Значение) Тогда
			РезультатПеречисления = ОбщегоНазначения.ИмяЗначенияПеречисления(Значение);
		Иначе
			РезультатПеречисления = "";
		КонецЕсли; 
		
		Если ОбъявлениеКолонок[Свойство].Свойство("Type") Тогда
			
			Результат = РезультатПеречисления;
			
		Иначе
			
			ПолноеИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(Значение);
			Результат = Новый Соответствие;
			Результат[ПолноеИмяТаблицы] = РезультатПеречисления
			
		КонецЕсли; 

				
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗначения) ИЛИ ОбщийМодульСерверПовтИсп_СonFilter.ТипСсылкиВИД().СодержитТип(ТипЗначения) Тогда
		
		Если ОбъявлениеКолонок[Свойство].Свойство("Type")
		   И ОбъявлениеКолонок[Свойство].Type = "Сomposite" Тогда
			
			ПолноеИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(Значение);
			Результат = Новый Соответствие;
			Результат[ПолноеИмяТаблицы] = ПолучитьСсылку(Значение,ДополнительныеПараметры);
			
		Иначе
			
			Результат = ПолучитьСсылку(Значение,ДополнительныеПараметры);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		
		Результат = ПолучитьДату(Значение,ДополнительныеПараметры);
				
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции 

// Получить представление ссылки
// 
// Параметры:
//  Значение 				- Произвольный - Ссылка
//  ДополнительныеПараметры - Структура 
//  * Ссылки - Булево - Признак вывода ссылок в формате Confluence Wiki Markup https://confluence.atlassian.com/doc/confluence-wiki-markup-251003035.html
// 
// Возвращаемое значение:
// 	Строка	 
Функция ПолучитьСсылку(Значение,ДополнительныеПараметры)
	Перем СпецФормат;
	ДополнительныеПараметры.Свойство("Ссылки",СпецФормат);
	Если СпецФормат = Истина Тогда
		Результат = СтрШаблон("[%1|%2]",Строка(Значение),ПолучитьИнтернетСсылку(Значение));
	Иначе 
		Результат = Строка(Значение.УникальныйИдентификатор());	
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Получить представление ссылки
// 
// Параметры:
//  Значение 				- Дата - Дата или время
//  ДополнительныеПараметры - Структура 
//  * Ссылки - Булево - Признак вывода дат в формате плагина TableFilter
// 
// Возвращаемое значение:
// 	Строка	 
Функция ПолучитьДату(Значение,ДополнительныеПараметры)
	Перем СпецФормат;
	ДополнительныеПараметры.Свойство("Ссылки",СпецФормат);
	Если СпецФормат = Истина Тогда
		Результат = Формат(Значение,"ДФ=dd.MM.yy;");
	Иначе 
		Результат = Значение;	
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Получить представление ссылки
// 
// Параметры:
//  ДополнительныеПараметры - Структура 
//  * Ссылки - Булево - Признак вывода дат в формате плагина TableFilter
// 
// Возвращаемое значение:
// 	Строка	 
Функция ПолучитьНеопределено(ДополнительныеПараметры)
	Перем СпецФормат;
	ДополнительныеПараметры.Свойство("Ссылки",СпецФормат);
	Если СпецФормат = Истина Тогда
		Результат = "";
	Иначе 
		Результат = Неопределено;	
	КонецЕсли;
	Возврат Результат;
КонецФункции	

#КонецОбласти

Процедура УдалитьВременныйФайл(ПолноеИмяФайла)
	
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
		
	Попытка
		УдалитьФайлы(ПолноеИмяФайла);
	Исключение

		//@skip-check object-deprecated
		ЗаписьЖурналаРегистрации(
			ИмяСобытияТрансформацииОтчетов(),
			УровеньЖурналаРегистрации.Предупреждение,,, 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось удалить временный файл
				           |%1 по причине: %2'"), 
				ПолноеИмяФайла, 
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли